// Backend - Express com MySQL

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import clienteRoutes from './routes/clienteRoutes';
import { createConnection } from './config/database';

dotenv.config();

createConnection();

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());

app.use('/clientes', clienteRoutes);

app.listen(PORT, () => {
    console.log(`Servidor rodando na porta ${PORT}`);
});

// Configuração do Banco de Dados (MySQL)
import { createPool } from 'mysql2/promise';

dotenv.config();

export const pool = createPool({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
});

export const createConnection = async () => {
    try {
        const connection = await pool.getConnection();
        console.log("Conectado ao banco de dados");
        connection.release();
    } catch (error) {
        console.error("Erro ao conectar ao banco de dados:", error);
        process.exit(1);
    }
};

// Rotas do Cliente
import express from 'express';
import { listarClientes, criarCliente, editarCliente, excluirCliente } from '../controllers/clienteController';

const router = express.Router();

router.get('/', listarClientes);
router.post('/', criarCliente);
router.put('/:id', editarCliente);
router.delete('/:id', excluirCliente);

export default router;

// Validações (CNPJ e CEP)
import axios from 'axios';

export const validarCNPJ = (cnpj: string): boolean => {
    cnpj = cnpj.replace(/\D/g, '');
    if (cnpj.length !== 14) return false;
    let tamanho = cnpj.length - 2;
    let numeros = cnpj.substring(0, tamanho);
    let digitos = cnpj.substring(tamanho);
    let soma = 0;
    let pos = tamanho - 7;
    for (let i = tamanho; i >= 1; i--) {
        soma += parseInt(numeros.charAt(tamanho - i)) * pos--;
        if (pos < 2) pos = 9;
    }
    let resultado = soma % 11 < 2 ? 0 : 11 - (soma % 11);
    if (resultado != parseInt(digitos.charAt(0))) return false;
    
    tamanho = tamanho + 1;
    numeros = cnpj.substring(0, tamanho);
    soma = 0;
    pos = tamanho - 7;
    for (let i = tamanho; i >= 1; i--) {
        soma += parseInt(numeros.charAt(tamanho - i)) * pos--;
        if (pos < 2) pos = 9;
    }
    resultado = soma % 11 < 2 ? 0 : 11 - (soma % 11);
    if (resultado != parseInt(digitos.charAt(1))) return false;
    return true;
};

export const buscarCEP = async (cep: string) => {
    try {
        const response = await axios.get(`https://viacep.com.br/ws/${cep}/json/`);
        return response.data;
    } catch (error) {
        throw new Error("Erro ao buscar CEP");
    }
};

// Controlador do Cliente
import { Request, Response } from 'express';
import { pool } from '../config/database';
import { validarCNPJ, buscarCEP } from '../utils/validacoes';

export const listarClientes = async (req: Request, res: Response) => {
    try {
        const [rows] = await pool.query('SELECT * FROM clientes');
        res.json(rows);
    } catch (error) {
        res.status(500).json({ error: "Erro ao listar clientes" });
    }
};

export const criarCliente = async (req: Request, res: Response) => {
    try {
        const { cnpj, nome, nomeFantasia, cep, logradouro, bairro, cidade, uf, complemento, email, telefone } = req.body;
        if (!validarCNPJ(cnpj)) {
            return res.status(400).json({ error: "CNPJ inválido" });
        }
        const endereco = await buscarCEP(cep);
        if (!endereco || endereco.erro) {
            return res.status(400).json({ error: "CEP inválido" });
        }
        await pool.query('INSERT INTO clientes (cnpj, nome, nomeFantasia, cep, logradouro, bairro, cidade, uf, complemento, email, telefone) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [cnpj, nome, nomeFantasia, cep, endereco.logradouro, endereco.bairro, endereco.localidade, endereco.uf, complemento, email, telefone]);
        res.status(201).json({ message: "Cliente criado com sucesso!" });
    } catch (error) {
        res.status(500).json({ error: "Erro ao criar cliente" });
    }
};

export const editarCliente = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        const { cnpj, nome, nomeFantasia, cep, logradouro, bairro, cidade, uf, complemento, email, telefone } = req.body;
        if (!validarCNPJ(cnpj)) {
            return res.status(400).json({ error: "CNPJ inválido" });
        }
        await pool.query('UPDATE clientes SET cnpj=?, nome=?, nomeFantasia=?, cep=?, logradouro=?, bairro=?, cidade=?, uf=?, complemento=?, email=?, telefone=? WHERE id=?',
            [cnpj, nome, nomeFantasia, cep, logradouro, bairro, cidade, uf, complemento, email, telefone, id]);
        res.json({ message: "Cliente atualizado com sucesso!" });
    } catch (error) {
        res.status(500).json({ error: "Erro ao editar cliente" });
    }
};
